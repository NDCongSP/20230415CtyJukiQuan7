// Created using LayerGen 3.5

using System;
using System.Collections.Generic;
using System.Data;

namespace BusinessLayer.Juki_giamsatthoigiankho
{
    [Serializable]
    public partial class Bangnhapsolop : DataLayer.Juki_giamsatthoigiankho.Bangnhapsolop
    {
        public enum ConcurrencyOptions
        {
            /// <summary>
            /// Concurrency checking is disabled
            /// </summary>
            Ignore = 0,
            /// <summary>
            /// Concurrency checking is checked and an exception is thrown if the data changed
            /// </summary>
            Strict = 1
		}

        public enum Fields
        {
            MaBarCodeSanPham,
            TenSanPhamTiengViet,
            TenSanPhamTiengAnh,
            LopNhung,
            TongLopNhung,
            Zircon01,
            Zircon02,
            Zircon03,
            Zircon04,
            CatL01,
            CatL02,
            CatL03,
            CatL04,
            CatL05,
            CatL06,
            CatL07,
            CatL08,
            CatL09,
            SIRU
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class.
        /// </summary>
        public Bangnhapsolop() : base()
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString) : base(connectionString)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class,
        /// optionally using stored procedures or Sql text.
        /// </summary>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(bool useStoredProcedures) : base(useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class,
        /// optionally using stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, bool useStoredProcedures) : base(connectionString, useStoredProcedures)
        {
            
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        public Bangnhapsolop(string id) : base(id)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, string id) : base(connectionString, id)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and optionally
        /// using stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(string id, bool useStoredProcedures) : base(id, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and optionally
        /// using stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, string id, bool useStoredProcedures) : base(connectionString, id, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
		public Bangnhapsolop(string id, List<Fields> fields) : base(id, fields)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
		public Bangnhapsolop(LayerGenConnectionString connectionString, string id, List<Fields> fields) : base(connectionString, id, fields)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
		public Bangnhapsolop(string id, List<Fields> fields, bool useStoredProcedures) : base(id, fields, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
		public Bangnhapsolop(LayerGenConnectionString connectionString, string id, List<Fields> fields, bool useStoredProcedures) : base(connectionString, id, fields, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected internal Bangnhapsolop(DataRow dr) : base(dr)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected internal Bangnhapsolop(LayerGenConnectionString connectionString, DataRow dr) : base(connectionString, dr)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        protected internal Bangnhapsolop(DataRow dr, bool useStoredProcedures) : base(dr, useStoredProcedures)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        protected internal Bangnhapsolop(LayerGenConnectionString connectionString, DataRow dr, bool useStoredProcedures) : base(connectionString, dr, useStoredProcedures)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        public Bangnhapsolop(ConcurrencyOptions concurrency) : base(concurrency)
        {
            
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, ConcurrencyOptions concurrency) : base(connectionString, concurrency)
        {
            
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, explicitly enabling
        /// or disabling the concurrency option. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(ConcurrencyOptions concurrency, bool useStoredProcedures) : base(concurrency, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, explicitly enabling
        /// or disabling the concurrency option. You can also specify if you want data access
        /// to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(connectionString, concurrency, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        public Bangnhapsolop(string id, ConcurrencyOptions concurrency) : base(id, concurrency)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, string id, ConcurrencyOptions concurrency) : base(connectionString, id, concurrency)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option. You can also specify if you want data
        /// access to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(string id, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(id, concurrency, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option. You can also specify if you want data
        /// access to be done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        public Bangnhapsolop(LayerGenConnectionString connectionString, string id, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(connectionString, id, concurrency, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
		public Bangnhapsolop(string id, List<Fields> fields, ConcurrencyOptions concurrency) : base(id, fields, concurrency)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
		public Bangnhapsolop(LayerGenConnectionString connectionString, string id, List<Fields> fields, ConcurrencyOptions concurrency) : base(connectionString, id, fields, concurrency)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option. You can also specify if you want data access to be
        /// done with stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
		public Bangnhapsolop(string id, List<Fields> fields, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(id, fields, concurrency, useStoredProcedures)
        {
            
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option. You can also specify if you want data access to be
        /// done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
		public Bangnhapsolop(LayerGenConnectionString connectionString, string id, List<Fields> fields, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(connectionString, id, fields, concurrency, useStoredProcedures)
        {
            
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected internal Bangnhapsolop(DataRow dr, ConcurrencyOptions concurrency) : base(dr, concurrency)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected internal Bangnhapsolop(LayerGenConnectionString connectionString, DataRow dr, ConcurrencyOptions concurrency) : base(connectionString, dr, concurrency)
        {

        }

		/// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option. You can also specify if you want data access to be
        /// done with stored procedures or Sql text.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        protected internal Bangnhapsolop(DataRow dr, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(dr, concurrency, useStoredProcedures)
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Bangnhapsolop"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option. You can also specify if you want data access to be
        /// done with stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="BusinessLayer.Juki_giamsatthoigiankho.Bangnhapsolop.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text.</param>
        protected internal Bangnhapsolop(LayerGenConnectionString connectionString, DataRow dr, ConcurrencyOptions concurrency, bool useStoredProcedures) : base(connectionString, dr, concurrency, useStoredProcedures)
        {

        }

        /// <summary>
        /// The name of the table
        /// </summary>
        public static string LgTableName
        {
            get { return LayerGenTableName; }
        }

        /// <summary>
        /// The name of table, delimited with backticks
        /// e.g. "`bangnhapsolop`" instead of "bangnhapsolop"
        /// </summary>
        public static string LgTableNameDelimited
        {
            get { return LayerGenTableNameDelimited; }
        }

        protected internal bool LayerGenIsUpdate()
        {
            return _layerGenIsUpdate;
        }

        protected internal string LayerGenConnectionString()
        {
            return _connectionString;
        }

        /// <summary>
        /// The name of the primary key in the table
        /// </summary>
        public static string LgPrimaryKeyName
        {
            get { return LayerGenPrimaryKey; }
        }

    }

    /// <summary>
    /// Represents a collection of <see cref="Bangnhapsolop"/> objects.
    /// </summary>
    [Serializable]
    public class Bangnhapsolops : List<Bangnhapsolop>
    {
        private readonly bool _useStoredProcedures;
        private string _connectionString;
        private readonly Bangnhapsolop.ConcurrencyOptions _concurrency;

        public Bangnhapsolops(Bangnhapsolop.ConcurrencyOptions concurrency)
        {
            _concurrency = concurrency;
            _useStoredProcedures = false;
            _connectionString = DataLayer.Juki_giamsatthoigiankho.Universal.GetConnectionString();
		}

        public Bangnhapsolops(LayerGenConnectionString connectionString, Bangnhapsolop.ConcurrencyOptions concurrency)
        {
            _concurrency = concurrency;
            _useStoredProcedures = false;
            _connectionString = connectionString.ConnectionString;
		}

        public Bangnhapsolops(Bangnhapsolop.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _useStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _connectionString = DataLayer.Juki_giamsatthoigiankho.Universal.GetConnectionString();
		}

        public Bangnhapsolops(LayerGenConnectionString connectionString, Bangnhapsolop.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _useStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _connectionString = connectionString.ConnectionString;
		}
		
        public Bangnhapsolops()
        {
            _concurrency = Bangnhapsolop.ConcurrencyOptions.Ignore;
            _useStoredProcedures = false;
            _connectionString = DataLayer.Juki_giamsatthoigiankho.Universal.GetConnectionString();
		}

        public Bangnhapsolops(LayerGenConnectionString connectionString)
        {
            _concurrency = Bangnhapsolop.ConcurrencyOptions.Ignore;
            _useStoredProcedures = false;
            _connectionString = connectionString.ConnectionString;
		}

        public Bangnhapsolops(bool useStoredProcedures)
        {
            _concurrency = Bangnhapsolop.ConcurrencyOptions.Ignore;
            _useStoredProcedures = useStoredProcedures;
            _connectionString = DataLayer.Juki_giamsatthoigiankho.Universal.GetConnectionString();
		}

        public Bangnhapsolops(LayerGenConnectionString connectionString, bool useStoredProcedures)
        {
            _concurrency = Bangnhapsolop.ConcurrencyOptions.Ignore;
            _useStoredProcedures = useStoredProcedures;
            _connectionString = connectionString.ConnectionString;
		}

        protected void Load(DataRowCollection dataRows)
        {
            LayerGenConnectionString connectString = new LayerGenConnectionString();
            connectString.ConnectionString = _connectionString;

            Clear();
            foreach (DataRow dr in dataRows)
            {
                Add(new Bangnhapsolop(connectString, dr, _concurrency, _useStoredProcedures));
            }
        }


        /// <summary>
        /// Retrieves rows from the Bangnhapsolop table by executing the given stored procedure.
        /// </summary>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        /// <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        public void GetByStoredProcedure(string procedureName, Dictionary<string, object> procedureParams)
        {
            LayerGenConnectionString connectString = new LayerGenConnectionString();
            connectString.ConnectionString = _connectionString;

            DataTable dt = DataLayer.Juki_giamsatthoigiankho.Bangnhapsolop.GetByStoredProcedure(connectString, procedureName, procedureParams);
            if (dt != null)
            {
                Load(dt.Rows);
            }
        }

        /// <summary>
        /// Retrieves rows from the Bangnhapsolop table by executing the given stored procedure.
        /// </summary>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        public void GetByStoredProcedure(string procedureName)
        {
            LayerGenConnectionString connectString = new LayerGenConnectionString();
            connectString.ConnectionString = _connectionString;

            DataTable dt = DataLayer.Juki_giamsatthoigiankho.Bangnhapsolop.GetByStoredProcedure(connectString, procedureName, null);
            if (dt != null)
            {
                Load(dt.Rows);
            }
        }

        /// <summary>
        /// Retrieves rows from the Bangnhapsolop table, based on the given SQL statement.
        /// </summary>
        /// <param name="sql">The SQL statement to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        public void GetBySqlStatement(string sql, params object[] sqlParams)
        {
            LayerGenConnectionString connectString = new LayerGenConnectionString();
            connectString.ConnectionString = _connectionString;

            DataTable dt = DataLayer.Juki_giamsatthoigiankho.Bangnhapsolop.GetBySqlStatement(connectString, sql, sqlParams);
            if (dt != null)
            {
                Load(dt.Rows);
            }
        }

        /// <summary>
        /// Retrieves all the rows from the Bangnhapsolop table.
        /// </summary>
        public void GetAll()
        {
		    GetAll(_useStoredProcedures);
        }

        /// <summary>
        /// Retrieves all the rows from the Bangnhapsolop table.
        /// </summary>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        private void GetAll(bool useStoredProcedures)
        {
            LayerGenConnectionString connectString = new LayerGenConnectionString();
            connectString.ConnectionString = _connectionString;

            DataTable dt = DataLayer.Juki_giamsatthoigiankho.Bangnhapsolop.GetAll(connectString, useStoredProcedures);
            if (dt != null)
            {
                Load(dt.Rows);
            }
        }

    }
}

